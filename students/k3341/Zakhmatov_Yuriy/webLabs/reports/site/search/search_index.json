{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161","text":""},{"location":"#_1","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":""},{"location":"#1","title":"\u041b\u0430\u0431\u0430 1","text":"<ul> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5</li> </ul>"},{"location":"lab_1/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":""},{"location":"lab_1/task1/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1:","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435: </p> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430: </li> </ol> <pre><code>import socket\n\n\ndef run():\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 UDP \u0441\u043e\u043a\u0435\u0442\u0430\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    # \u0417\u0430\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n    server_address = (\"localhost\", 8080)\n    server_socket.bind(server_address)\n\n    print(f\"Server started on {server_address[0]}:{server_address[1]}\")\n    print(\"Awaiting connection...\")\n\n    try:\n        while True:\n            # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n\n            data, client_address = server_socket.recvfrom(1024)\n            message = data.decode(\"utf-8\")\n\n            print(f\"Received message from {client_address} : {message}\")\n\n            # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\n            response = \"Hello, client\"\n            server_socket.sendto(response.encode(\"utf-8\"), client_address)\n            print(f\"Sent response to {client_address}\")\n    except Exception:\n        print(\"\\nServer shutting down...\")\n    finally:\n        server_socket.close()\n\n\nif __name__ == \"__main__\":\n    run()\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430</li> </ol> <pre><code>import socket\n\ndef run():\n    #\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 UDP\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    try:\n        #\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443\n        client_socket.connect(('localhost', 8080))\n\n        #\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n        client_socket.sendall(b'Hello, server')\n\n        #\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442\n        response = client_socket.recv(1024)\n        print(f\"Response from server: {response.decode('utf-8')}\")\n    except Exception as e:\n        print(e)\n    finally:\n        client_socket.close()\n\nif __name__ == '__main__':\n    run()\n</code></pre> <ol> <li>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 </li> </ol> <ol> <li>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 </li> </ol> <ol> <li>\u0421\u043a\u0440\u0438\u043d \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 </li> </ol>"},{"location":"lab_1/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":""},{"location":"lab_1/task2/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2:","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.</p> <p>\u0412\u0430\u0440\u0438\u0430\u043d\u0442:  8 (\u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430)</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435: </p> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430</li> </ol> <pre><code>import socket\n\ndef calculate(base, height):\n    return base * height\n\ndef run():\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 TCP \u0441\u043e\u043a\u0435\u0442\u0430\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # \u0417\u0430\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n    server_address = (\"localhost\", 8080)\n    server_socket.bind(server_address)\n    server_socket.listen(1)\n\n    print(f\"Server started on {server_address[0]}:{server_address[1]}\")\n    print(\"Awaiting connection...\")\n\n    while True:\n        # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        client_socket, addr = server_socket.accept()\n\n        print(f\"Connected by: {addr}\")\n\n        try:\n            # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            data = client_socket.recv(1024).decode(\"utf-8\")\n            print(f\"Received data: {data}\")\n\n            # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n            base, height = map(float, data.split(\",\"))\n\n            # \u0421\u0447\u0438\u0442\u0430\u0435\u043c\n            area = calculate(base,height)\n\n            # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n            client_socket.send(str(area).encode(\"utf-8\"))\n\n            print(f\"Sent result to client: {area}\")\n\n        except Exception as e:\n            error_msg = f\"Error: {e}\"\n            client_socket.send(error_msg.encode(\"utf-8\"))\n            print(error_msg)\n\n        finally:\n            client_socket.close()\n\nif __name__ == \"__main__\":\n    run()\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430</li> </ol> <pre><code>import socket\n\n\ndef run():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect(('localhost', 8080))\n\n    try:\n        base = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: \"))\n        height = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u044b\u0441\u043e\u0442\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: \"))\n\n        data = f\"{base},{height}\"\n        client_socket.send(data.encode('utf-8'))\n\n        result = client_socket.recv(1024).decode('utf-8')\n        print(f\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: {result}\")\n\n    except Exception as e:\n        print(f\"\u041e\u0448\u0438\u0431\u043a\u0430: {e}\")\n\n    finally:\n        client_socket.close()\n\n\nif __name__ == \"__main__\":\n    run()\n</code></pre>"},{"location":"lab_1/task2/#3-2","title":"3. \u041b\u043e\u0433 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u043a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0441\u044f 2 \u0440\u0430\u0437\u0430)","text":"<ol> <li>\u041b\u043e\u0433 \u043a\u043b\u0438\u0435\u043d\u0442\u0430</li> </ol>"},{"location":"lab_1/task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":""},{"location":"lab_1/task3/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3:","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435: </p> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430</li> </ol> <pre><code>import os\nimport socket\n\nHOST = \"localhost\"\nPORT = 8080\nMAX_CONNECTIONS = 3\nBUFFER_SIZE = 1024\n\n\ndef load_html_file(filename):\n    if os.path.exists(filename):\n        with open(filename, 'r', encoding=\"utf-8\") as file:\n            return file.read()\n    else:\n        return None\n\n\n\ndef run():\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind((HOST, PORT))\n    server.listen(MAX_CONNECTIONS)\n    print(\"Server is running on http://localhost:8080\")\n\n    while True:\n        client, _ = server.accept()\n        client.recv(BUFFER_SIZE)\n\n        html = load_html_file(\"index.html\")\n        if html is not None:\n            html_bytes = html.encode(\"utf-8\")\n            response = (\n                        \"HTTP/1.1 200 OK\\r\\n\"\n                        \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                        f\"Content-Length: {len(html_bytes)}\\r\\n\"\n                        \"\\r\\n\"\n\n            ).encode('utf-8') + html_bytes\n        else:\n            response = (\n                \"HTTP/1.1 404 Not Found\\r\\n\"\n                \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                \"\\r\\n\"\n                \"&lt;h1&gt;404 Not Found&lt;/h1&gt;\"\n            ).encode('utf-8')\n        client.sendall(response)\n        client.close()\n\nif __name__ == \"__main__\":\n    run()\n</code></pre> <ol> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 </li> </ol>"},{"location":"lab_1/task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":""},{"location":"lab_1/task4/#4","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435: </p> <ol> <li>\u0421\u043a\u0440\u0438\u043f\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430</li> </ol> <pre><code>import socket\nimport threading\n\nHOST = 'localhost'\nPORT = 8080\n\n\nclass ChatServer:\n    def __init__(self, host=HOST, port=PORT):\n        self.host = host\n        self.port = port\n        self.clients = [] # \u041a\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\n        self.nicknames = [] # \u041d\u0438\u043a\u043d\u0435\u0439\u043c\u044b\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def broadcast(self, message, sender_client=None):\n        \"\"\"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f\"\"\"\n        for client in self.clients:\n            if client != sender_client:\n                try:\n                    client.send(message)\n                except:\n                    # \u0415\u0441\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n                    self.remove_client(client)\n\n    def remove_client(self, client):\n        \"\"\"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u0447\u0430\u0442\u0430\"\"\"\n        if client in self.clients:\n            index = self.clients.index(client)\n            self.clients.remove(client)\n            nickname = self.nicknames[index]\n            self.nicknames.remove(nickname)\n\n            broadcast_message = f\"{nickname} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442!\".encode('utf-8')\n            self.broadcast(broadcast_message)\n            print(f\"{nickname} \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f\")\n\n    def handle_client(self, client):\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\"\"\"\n        while True:\n            try:\n                message = client.recv(1024)\n                if message:\n                    self.broadcast(message, client)\n                else:\n                    self.remove_client(client)\n                    break\n            except:\n                self.remove_client(client)\n                break\n\n    def start_server(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430\"\"\"\n        self.server_socket.bind((self.host, self.port))\n        self.server_socket.listen()\n        print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0447\u0430\u0442\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {self.host}:{self.port}\")\n\n        while True:\n            client, address = self.server_socket.accept()\n            print(f\"\u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {str(address)}\")\n\n            # \u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0438\u043a\u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            client.send(\"NICK\".encode('utf-8'))\n            nickname = client.recv(1024).decode('utf-8')\n\n            self.nicknames.append(nickname)\n            self.clients.append(client)\n\n            print(f\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {nickname}\")\n            broadcast_message = f\"{nickname} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443!\".encode('utf-8')\n            self.broadcast(broadcast_message)\n            client.send(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!\".encode('utf-8'))\n\n            # \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            thread = threading.Thread(target=self.handle_client, args=(client,), daemon=True)\n            thread.start()\n\n\nif __name__ == \"__main__\":\n    server = ChatServer()\n    server.start_server()\n</code></pre> <ol> <li>\u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</li> </ol> <pre><code>import socket\nimport threading\n\n\nHOST = 'localhost'\nPORT = 8080\n\nclass ChatClient:\n    def __init__(self, host=HOST, port=PORT):\n        self.host = host\n        self.port = port\n        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.nickname = None\n\n    def receive_messages(self):\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\"\"\"\n        while True:\n            try:\n                message = self.client_socket.recv(1024).decode('utf-8')\n                if message == \"NICK\":\n                    self.client_socket.send(self.nickname.encode('utf-8'))\n                else:\n                    print(message)\n            except:\n                print(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430!\")\n                self.client_socket.close()\n                break\n\n    def send_messages(self):\n        \"\"\"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\"\"\"\n        while True:\n            try:\n                message = input()\n                if message.lower() == 'exit':\n                    break\n                formatted_message = f\"{self.nickname}: {message}\"\n                self.client_socket.send(formatted_message.encode('utf-8'))\n            except:\n                print(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f!\")\n                break\n\n    def start_client(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430\"\"\"\n        try:\n            self.client_socket.connect((self.host, self.port))\n\n            # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0438\u043a\u0430\n            self.nickname = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c: \")\n\n            # \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n            receive_thread = threading.Thread(target=self.receive_messages, daemon=True)\n            receive_thread.start()\n\n            print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e! \u041d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 'exit')\")\n            print(\"-\" * 50)\n\n            # \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n            self.send_messages()\n\n        except Exception as e:\n            print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f: {e}\")\n        finally:\n            self.client_socket.close()\n\n\nif __name__ == \"__main__\":\n    client = ChatClient()\n    client.start_client()\n</code></pre> <ol> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b (\u0441\u043b\u0435\u0432\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 1, \u0441\u043f\u0440\u0430\u0432\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 2, \u0441\u043d\u0438\u0437\u0443 \u0441\u0435\u0440\u0432\u0435\u0440)</li> </ol> <p></p>"},{"location":"lab_1/task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":""},{"location":"lab_1/task5/#5","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: 1. \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. 2. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435: </p> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430:</li> </ol> <pre><code>import socket\nimport threading\nimport http.client\nfrom urllib.parse import parse_qs, unquote\nimport os\n\nDATA_FILE = \"grades.txt\"  # \u0425\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n\n\nclass MyHTTPServer:\n    def __init__(self, host, port):\n        self._host = host\n        self._port = port\n        self._grades = self.load_grades()  # \u0441\u043b\u043e\u0432\u0430\u0440\u044c {\u043f\u0440\u0435\u0434\u043c\u0435\u0442: [\u043e\u0446\u0435\u043d\u043a\u0438]}\n\n    # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\n    def load_grades(self):\n        if not os.path.exists(DATA_FILE):\n            return {}\n        grades = {}\n        with open(DATA_FILE, \"r\", encoding=\"utf-8\") as f:\n            for line in f:\n                if \";\" in line:\n                    subject, grades_str = line.strip().split(\";\", 1)\n                    grades[subject] = grades_str.split(\",\")\n        return grades\n\n    # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\n    def save_grades(self):\n        with open(DATA_FILE, \"w\", encoding=\"utf-8\") as f:\n            for subject, grade_list in self._grades.items():\n                f.write(f\"{subject};{','.join(grade_list)}\\n\")\n\n    # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430\n    def serve_forever(self):\n        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        try:\n            server.bind((self._host, self._port))\n            server.listen()\n            print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u0430\u0434\u0440\u0435\u0441\u0435 {self._host}:{self._port}\")\n            while True:\n                try:\n                    conn, addr = server.accept()\n                    client_thread = threading.Thread(target=self.serve_client, args=(conn,), daemon=True)\n                    client_thread.start()\n                except socket.timeout:\n                    continue\n                except KeyboardInterrupt:\n                    break\n                except Exception as e:\n                    print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f: {e}\")\n        finally:\n            print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f...\")\n            server.close()\n\n    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    def serve_client(self, conn):\n        try:\n            req = self.parse_request(conn)\n            resp, status_code = self.handle_request(req)\n            self.send_response(conn, resp)\n            self.log_request(req, status_code, http.client.responses[status_code])\n        except ConnectionResetError:\n            conn = None\n        except Exception as e:\n            self.send_error(conn, e)\n        if conn:\n            conn.close()\n\n    # \u0420\u0430\u0437\u0431\u043e\u0440 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430\n    def parse_request(self, conn):\n        rfile = conn.makefile('rb')\n        request_line = rfile.readline().decode('iso-8859-1').strip()\n        if not request_line:\n            raise ValueError(\"\u041f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\")\n        method, path, version = request_line.split()\n\n        headers = self.parse_headers(rfile)\n        content_length = int(headers.get('Content-Length', 0))\n        body = rfile.read(content_length).decode('utf-8') if content_length else None\n        rfile.close()\n\n        return {\n            'method': method,\n            'path': path,\n            'version': version,\n            'headers': headers,\n            'body': body\n        }\n\n    # \u0420\u0430\u0437\u0431\u043e\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432\n    def parse_headers(self, rfile):\n        headers = {}\n        while True:\n            line = rfile.readline().decode('iso-8859-1').strip()\n            if not line:\n                break\n            if ':' in line:\n                header_name, header_value = line.split(\":\", 1)\n                headers[header_name.strip()] = header_value.strip()\n        return headers\n\n    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n    def handle_request(self, req):\n        if req['method'] == 'GET' and req['path'] == '/':\n            return self.build_response(200, self.render_grades())\n        elif req['method'] == 'POST' and req['path'] == '/':\n            body = req['body']\n            if body:\n                params = parse_qs(body)\n                subject = unquote(params.get('subject', [''])[0]).strip()\n                grade = unquote(params.get('grade', [''])[0]).strip()\n\n                if subject and grade:\n                    if subject not in self._grades:\n                        self._grades[subject] = []\n                    self._grades[subject].append(grade)\n                    self.save_grades()\n                    return self.build_response(200, self.render_grades())\n            return self.build_response(400, \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\")\n        else:\n            return self.build_response(404, \"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n\n    # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430\n    def build_response(self, status_code, body):\n        response_line = f\"HTTP/1.1 {status_code} {http.client.responses[status_code]}\\r\\n\"\n        headers = \"Content-Type: text/html; charset=utf-8\\r\\n\"\n        headers += f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\"\n        headers += \"Connection: close\\r\\n\\r\\n\"\n        return response_line + headers + body, status_code\n\n    def send_response(self, conn, resp):\n        conn.sendall(resp.encode('utf-8'))\n\n    def send_error(self, conn, err):\n        resp, _ = self.build_response(500, f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {err}\")\n        self.send_response(conn, resp)\n        conn.close()\n\n    # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 HTML\n    def render_grades(self):\n        html = \"\"\"\n            &lt;!DOCTYPE html&gt;\n            &lt;html lang=\"ru\"&gt;\n            &lt;head&gt;\n                &lt;meta charset=\"UTF-8\"&gt;\n                &lt;title&gt;\u0416\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;h1&gt;\u0416\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a&lt;/h1&gt;\n                &lt;form method=\"POST\" action=\"/\"&gt;\n                    &lt;label&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: &lt;input type=\"text\" name=\"subject\" required&gt;&lt;/label&gt;&lt;br&gt;\n                    &lt;label&gt;\u041e\u0446\u0435\u043d\u043a\u0430: &lt;input type=\"number\" name=\"grade\" min=\"1\" max=\"5\" required&gt;&lt;/label&gt;&lt;br&gt;\n                    &lt;button type=\"submit\"&gt;\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c&lt;/button&gt;\n                &lt;/form&gt;\n                &lt;h2&gt;\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a&lt;/h2&gt;\n        \"\"\"\n        if self._grades:\n            html += \"&lt;table border='1'&gt;&lt;tr&gt;&lt;th&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430&lt;/th&gt;&lt;th&gt;\u041e\u0446\u0435\u043d\u043a\u0438&lt;/th&gt;&lt;/tr&gt;\"\n            for subject, grades_list in self._grades.items():\n                grades_str = \", \".join(grades_list)\n                html += f\"&lt;tr&gt;&lt;td&gt;{subject}&lt;/td&gt;&lt;td&gt;{grades_str}&lt;/td&gt;&lt;/tr&gt;\"\n            html += \"&lt;/table&gt;\"\n        else:\n            html += \"&lt;p&gt;\u041e\u0446\u0435\u043d\u043e\u043a \u043f\u043e\u043a\u0430 \u043d\u0435\u0442&lt;/p&gt;\"\n\n        html += \"&lt;/body&gt;&lt;/html&gt;\"\n        return html\n\n    def log_request(self, req, status_code, status_text):\n        print(f\"{req['method']} {req['path']} -&gt; {status_code} {status_text}\")\n\n\nif __name__ == '__main__':\n    HOST = 'localhost'\n    PORT = 8080\n    serv = MyHTTPServer(HOST, PORT)\n    serv.serve_forever()\n</code></pre>"},{"location":"lab_1/task5/#2","title":"2. \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","text":""}]}